# Template for ibutsu stage server
kind: Template
apiVersion: template.openshift.io/v1
metadata:
  name: ibutsu-backend-stage-template
# ===============================================
# Backend
# ===============================================
objects:
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    labels:
      app: ${APP_NAME}
    name: ibutsu-backend
    namespace: ${NAMESPACE}
  spec:
    replicas: 1
    selector:
      deploymentConfig: ibutsu-backend
    strategy:
      type: Rolling
    template:
      metadata:
        labels:
          app: ${APP_NAME}
          deploymentConfig: ibutsu-backend
      spec:
        containers:
        - env:
          - name: APP_CONFIG
            value: config.py
          - name: HAS_FRONTEND
            value: "false"
          - name: POSTGRESQL_HOST
            value: postgresql.${NAMESPACE}.svc
          - name: POSTGRESQL_PORT
            value: "5432"
          - name: POSTGRESQL_USER
            valueFrom:
              secretKeyRef:
                key: database-user
                name: postgresql
          - name: POSTGRESQL_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: postgresql
          - name: POSTGRESQL_DATABASE
            valueFrom:
              secretKeyRef:
                key: database-name
                name: postgresql
          - name: REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: redis
          - name: CELERY_BROKER_URL
            value: redis://:${REDIS_PASSWORD}@redis.${NAMESPACE}.svc
          - name: CELERY_RESULT_BACKEND
            value: redis://:${REDIS_PASSWORD}@redis.${NAMESPACE}.svc
          - name: FRONTEND_URL
            value: ${FRONTEND_ROUTE}
          - name: BACKEND_URL
            value: ${BACKEND_ROUTE}
          image: backend
          imagePullPolicy: Always
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 0
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 20
          name: ibutsu-backend
          ports:
          - containerPort: 8080
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 20
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - ibutsu-backend
        from:
          kind: ImageStreamTag
          name: backend:master
          namespace: ${NAMESPACE}
      type: ImageChange
    - type: ConfigChange
# -----------------------------------------------
- kind: ImageStream
  apiVersion: v1
  metadata:
    name: backend
    annotations:
      description: "The api of Ibutsu server"
  spec:
    lookupPolicy:
      local: false
    tags:
    - annotations: null
      from:
        kind: DockerImage
        name: quay.io/ibutsu/backend:master
      generation: 3
      importPolicy:
        scheduled: true
      name: master
      referencePolicy:
        type: Source
# -----------------------------------------------
- kind: Service
  apiVersion: v1
  metadata:
    labels:
      app: ${APP_NAME}
    name: ibutsu-backend
    namespace: ${NAMESPACE}
  spec:
    ports:
    - port: 8080
      targetPort: 8080
    selector:
      deploymentConfig: ibutsu-backend
# -----------------------------------------------
- kind: Route
  apiVersion: v1
  metadata:
    labels:
      app: ${APP_NAME}
    name: ibutsu-backend
    namespace: ${NAMESPACE}
    annotations:
      description: "A route to the backend"
  spec:
    host: ${BACKEND_ROUTE}
    to:
      kind: Service
      name: ibutsu-backend
    tls:
      insecureEdgeTerminationPolicy: Redirect
      termination: edge
# ===============================================
# Parameters
# ===============================================
parameters:
- name: APP_NAME
  displayName: App Name
  description: The name of the application
  value: ibutsu-server
- name: NAMESPACE
  displayName: Namespace
  description: The namespace for all of the images, applications, etc.
  value: iqe-stage-ibutsu-server
- name: BACKEND_ROUTE
  displayName: Backend Route
  description: The URL of the backend of the Ibutsu server
  value: ibutsu-api.example.com
- name: FRONTEND_ROUTE
  displayName: Frontend Route
  description: The URL of the frontend of the Ibutsu server
  value: ibutsu.example.com
- name: REDIS_PASSWORD
  displayName: Redis Password
  description: The password for Redis
  generate: expression
  from: '[\w]{16}'
