kind: Template
apiVersion: v1
objects:
- kind: BuildConfig
  apiVersion: v1
  metadata:
    labels:
      app: ${APP_NAME}
    name: ibutsu-frontend
    namespace: ${NAMESPACE}
  spec:
    resources:
      limits:
        memory: 2Gi
    source:
      type: Git
      git:
        ref: ${IBUTSU_REPO_BRANCH}
        uri: ${IBUTSU_REPO_URL}
      contextDir: frontend
    strategy:
      sourceStrategy:
        from:
          kind: ImageStreamTag
          name: nodejs:latest
          namespace: openshift
        env:
        - name: YARN_ENABLED
          value: "true"
        - name: GIT_SSL_NO_VERIFY
          value: "true"
        - name: REACT_APP_SERVER_URL
          value: ${BACKEND_ROUTE}
      type: Source
    output:
      to:
        kind: ImageStreamTag
        name: ibutsu-frontend:latest
    triggers:
    - imageChange:
      type: ImageChange
    - type: ConfigChange
- kind: BuildConfig
  apiVersion: v1
  metadata:
    labels:
      app: ${APP_NAME}
    name: ibutsu-backend
    namespace: ${NAMESPACE}
  spec:
    source:
      type: Git
      git:
        uri: ${IBUTSU_REPO_URL}
        ref: ${IBUTSU_REPO_BRANCH}
      contextDir: backend
    strategy:
      type: Source
      sourceStrategy:
        from:
          kind: ImageStreamTag
          name: python:3.6
          namespace: openshift
        env:
        - name: GIT_SSL_NO_VERIFY
          value: "true"
        - name: UPGRADE_PIP_TO_LATEST
          value: "true"
    output:
      to:
        kind: ImageStreamTag
        name: ibutsu-backend:latest
    runPolicy: Serial
    triggers:
    - imageChange:
      type: ImageChange
    - type: ConfigChange
- kind: BuildConfig
  apiVersion: v1
  metadata:
    labels:
      app: ${APP_NAME}
    name: ibutsu-worker
    namespace: ${NAMESPACE}
  spec:
    source:
      type: Git
      git:
        uri: ${IBUTSU_REPO_URL}
        ref: ${IBUTSU_REPO_BRANCH}
      contextDir: backend
    strategy:
      dockerStrategy:
        dockerfilePath: docker/Dockerfile.worker
        env:
        - name: GIT_SSL_NO_VERIFY
          value: "true"
      type: Docker
    output:
      to:
        kind: ImageStreamTag
        name: ibutsu-worker:latest
    runPolicy: Serial
    triggers:
    - imageChange:
      type: ImageChange
    - type: ConfigChange
- kind: BuildConfig
  apiVersion: v1
  metadata:
    labels:
      app: ${APP_NAME}
    name: ibutsu-scheduler
    namespace: ${NAMESPACE}
  spec:
    source:
      type: Git
      git:
        uri: ${IBUTSU_REPO_URL}
        ref: ${IBUTSU_REPO_BRANCH}
      contextDir: backend
    strategy:
      dockerStrategy:
        dockerfilePath: docker/Dockerfile.scheduler
        env:
        - name: GIT_SSL_NO_VERIFY
          value: "true"
      type: Docker
    output:
      to:
        kind: ImageStreamTag
        name: ibutsu-scheduler:latest
    runPolicy: Serial
    triggers:
    - imageChange:
      type: ImageChange
    - type: ConfigChange
- kind: BuildConfig
  apiVersion: v1
  metadata:
    labels:
      app: ${APP_NAME}
    name: celery-flower
    namespace: ${NAMESPACE}
  spec:
    source:
      type: Git
      git:
        uri: ${IBUTSU_REPO_URL}
        ref: ${IBUTSU_REPO_BRANCH}
      contextDir: backend
    strategy:
      dockerStrategy:
        dockerfilePath: docker/Dockerfile.flower
        env:
          - name: GIT_SSL_NO_VERIFY
            value: 'true'
      type: Docker
    output:
      to:
        kind: ImageStreamTag
        name: celery-flower:latest
    runPolicy: Serial
    triggers:
      - type: ConfigChange
      - imageChange:
        type: ImageChange
- kind: BuildConfig
  apiVersion: v1
  metadata:
    labels:
      app: ${APP_NAME}
    name: ibutsu-task-monitor
    namespace: ${NAMESPACE}
  spec:
    source:
      type: Git
      git:
        uri: ${IBUTSU_REPO_URL}
        ref: ${IBUTSU_REPO_BRANCH}
      contextDir: backend
    strategy:
      type: Source
      sourceStrategy:
        from:
          kind: ImageStreamTag
          name: python:3.6
          namespace: openshift
        env:
        - name: GIT_SSL_NO_VERIFY
          value: "true"
        - name: UPGRADE_PIP_TO_LATEST
          value: "true"
    output:
      to:
        kind: ImageStreamTag
        name: ibutsu-task-monitor:latest
    runPolicy: Serial
    triggers:
    - imageChange:
      type: ImageChange
    - type: ConfigChange
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    labels:
      app: ${APP_NAME}
    name: ibutsu-frontend
    namespace: ${NAMESPACE}
  spec:
    replicas: 1
    selector:
      deploymentConfig: ibutsu-frontend
    strategy:
      type: Rolling
    template:
      metadata:
        labels:
          app: ${APP_NAME}
          deploymentConfig: ibutsu-frontend
      spec:
        containers:
        - image: ibutsu-frontend
          imagePullPolicy: Always
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 0
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: ibutsu-frontend
          ports:
          - containerPort: 8080
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - ibutsu-frontend
        from:
          kind: ImageStreamTag
          name: ibutsu-frontend:latest
          namespace: ${NAMESPACE}
      type: ImageChange
    - type: ConfigChange
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    labels:
      app: ${APP_NAME}
    name: ibutsu-backend
    namespace: ${NAMESPACE}
  spec:
    replicas: 1
    selector:
      deploymentConfig: ibutsu-backend
    strategy:
      type: Rolling
    template:
      metadata:
        labels:
          app: ${APP_NAME}
          deploymentConfig: ibutsu-backend
      spec:
        containers:
        - env:
          - name: APP_CONFIG
            value: config.py
          - name: DYNACONF_HAS_FRONTEND
            value: "false"
          - name: DYNACONF_HOST
            value: mongodb.ibutsu-server.svc
          - name: DYNACONF_PORT
            value: "27017"
          - name: DYNACONF_USERNAME
            valueFrom:
              secretKeyRef:
                key: database-user
                name: mongodb
          - name: DYNACONF_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: mongodb
          - name: DYNACONF_DATABASE
            valueFrom:
              secretKeyRef:
                key: database-name
                name: mongodb
          - name: DYNACONF_CELERY_BROKER_URL
            value: redis.ibutsu-server.svc
          - name: DYNACONF_CELERY_RESULT_BACKEND
            value: redis.ibutsu-server.svc
          image: ibutsu-backend
          imagePullPolicy: Always
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 0
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: ibutsu-backend
          ports:
          - containerPort: 8080
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - ibutsu-backend
        from:
          kind: ImageStreamTag
          name: ibutsu-backend:latest
          namespace: ${NAMESPACE}
      type: ImageChange
    - type: ConfigChange
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    labels:
      app: ${APP_NAME}
    name: ibutsu-worker
    namespace: ${NAMESPACE}
  spec:
    replicas: 1
    selector:
      deploymentConfig: ibutsu-worker
    strategy:
      type: Rolling
    template:
      metadata:
        labels:
          app: ${APP_NAME}
          deploymentConfig: ibutsu-worker
      spec:
        containers:
        - env:
          - name: APP_SCRIPT
            value: celery_worker.sh
          - name: DYNACONF_CELERY_BROKER_URL
            value: redis://:${REDIS_PASSWORD}@redis.${NAMESPACE}.svc
          - name: DYNACONF_CELERY_RESULT_BACKEND
            value: redis://:${REDIS_PASSWORD}@redis.${NAMESPACE}.svc
          image: ibutsu-worker
          imagePullPolicy: Always
          name: ibutsu-worker
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - ibutsu-worker
        from:
          kind: ImageStreamTag
          name: ibutsu-worker:latest
          namespace: ${NAMESPACE}
      type: ImageChange
    - type: ConfigChange
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    labels:
      app: ${APP_NAME}
    name: ibutsu-scheduler
    namespace: ${NAMESPACE}
  spec:
    replicas: 1
    selector:
      deploymentConfig: ibutsu-scheduler
    strategy:
      type: Rolling
    template:
      metadata:
        labels:
          app: ${APP_NAME}
          deploymentConfig: ibutsu-scheduler
      spec:
        containers:
        - env:
          - name: DYNACONF_CELERY_BROKER_URL
            value: redis://:${REDIS_PASSWORD}@redis.${NAMESPACE}.svc
          - name: DYNACONF_CELERY_RESULT_BACKEND
            value: redis://:${REDIS_PASSWORD}@redis.${NAMESPACE}.svc
          image: ibutsu-scheduler
          imagePullPolicy: Always
          name: ibutsu-scheduler
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - ibutsu-scheduler
        from:
          kind: ImageStreamTag
          name: ibutsu-scheduler:latest
          namespace: ${NAMESPACE}
      type: ImageChange
    - type: ConfigChange
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    labels:
      app: ${APP_NAME}
    name: celery-flower
    namespace: ${NAMESPACE}
  spec:
    replicas: 1
    selector:
      deploymentConfig: celery-flower
    strategy:
      type: Rolling
    template:
      metadata:
        labels:
          app: ${APP_NAME}
          deploymentConfig: celery-flower
      spec:
        containers:
        - env:
          - name: BROKER_URL
            value: redis://:${REDIS_PASSWORD}@redis.${NAMESPACE}.svc
          image: celery-flower
          imagePullPolicy: Always
          name: celery-flower
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - celery-flower
        from:
          kind: ImageStreamTag
          name: celery-flower:latest
          namespace: ${NAMESPACE}
      type: ImageChange
    - type: ConfigChange
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    labels:
      app: ${APP_NAME}
    name: mongodb
    namespace: ${NAMESPACE}
  spec:
    replicas: 1
    selector:
      deploymentConfig: mongodb
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          deploymentConfig: mongodb
      spec:
        containers:
        - env:
          - name: MONGODB_USER
            valueFrom:
              secretKeyRef:
                key: database-user
                name: mongodb
          - name: MONGODB_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: mongodb
          - name: MONGODB_ADMIN_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-admin-password
                name: mongodb
          - name: MONGODB_DATABASE
            valueFrom:
              secretKeyRef:
                key: database-name
                name: mongodb
          image: ibutsu-mongodb
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 27017
            timeoutSeconds: 1
          name: mongodb
          ports:
          - containerPort: 27017
            protocol: TCP
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - '-i'
                - '-c'
                - >-
                  mongo 127.0.0.1:27017/$MONGODB_DATABASE -u $MONGODB_USER -p
                  $MONGODB_PASSWORD --eval="quit()"
            failureThreshold: 3
            initialDelaySeconds: 3
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            capabilities: {}
            privileged: false
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/lib/mongodb/data
            name: mongodb-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        volumes:
        - name: mongodb-data
          persistentVolumeClaim:
            claimName: mongodb
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - mongodb
        from:
          kind: ImageStreamTag
          name: mongodb:3.6
          namespace: openshift
      type: ImageChange
    - type: ConfigChange
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    labels:
      app: ${APP_NAME}
      template: redis-persistent-template
    name: redis
    namespace: ${NAMESPACE}
  spec:
    replicas: 1
    selector:
      deploymentConfig: redis
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          deploymentConfig: redis
      spec:
        containers:
        - env:
          - name: REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: redis
          image: redis
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 6379
            timeoutSeconds: 1
          name: redis
          ports:
          - containerPort: 6379
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - '-i'
              - '-c'
              - >-
                test "$(redis-cli -h 127.0.0.1 -a $REDIS_PASSWORD ping)" ==
                "PONG"
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 512Mi
          securityContext:
            capabilities: {}
            privileged: false
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/lib/redis/data
            name: redis-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        volumes:
        - name: redis-data
          persistentVolumeClaim:
            claimName: redis
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
          - redis
        from:
          kind: ImageStreamTag
          name: redis:3.2
          namespace: openshift
      type: ImageChange
    - type: ConfigChange
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    labels:
      app: ${APP_NAME}
    name: ibutsu-task-monitor
    namespace: ${NAMESPACE}
  spec:
    replicas: 1
    selector:
      deploymentConfig: ibutsu-task-monitor
    strategy:
      type: Rolling
    template:
      metadata:
        labels:
          app: ${APP_NAME}
          deploymentConfig: ibutsu-task-monitor
      spec:
        containers:
        - env:
          - name: APP_FILE
            value: ibutsu_server/tasks/monitor.py
          - name: DYNACONF_HOST
            value: mongodb.ibutsu-server.svc
          - name: DYNACONF_PORT
            value: "27017"
          - name: DYNACONF_USERNAME
            valueFrom:
              secretKeyRef:
                key: database-user
                name: mongodb
          - name: DYNACONF_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: mongodb
          - name: DYNACONF_DATABASE
            valueFrom:
              secretKeyRef:
                key: database-name
                name: mongodb
          - name: DYNACONF_CELERY_BROKER_URL
            value: redis://:${REDIS_PASSWORD}@redis.${NAMESPACE}.svc
          - name: DYNACONF_CELERY_RESULT_BACKEND
            value: redis://:${REDIS_PASSWORD}@redis.${NAMESPACE}.svc
          image: ibutsu-task-monitor
          imagePullPolicy: Always
          name: ibutsu-task-monitor
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - ibutsu-task-monitor
        from:
          kind: ImageStreamTag
          name: ibutsu-task-monitor:latest
          namespace: ${NAMESPACE}
      type: ImageChange
    - type: ConfigChange
- kind: ImageStream
  apiVersion: v1
  metadata:
    name: ibutsu-frontend
    annotations:
      description: "The frontend of Ibutsu server"
      openshift.io/image.insecureRepository: "true"
  spec:
    lookupPolicy:
      local: true
- kind: ImageStream
  apiVersion: v1
  metadata:
    name: ibutsu-backend
    annotations:
      description: "The backend of Ibutsu server"
      openshift.io/image.insecureRepository: "true"
  spec:
    lookupPolicy:
      local: true
- kind: ImageStream
  apiVersion: v1
  metadata:
    name: ibutsu-worker
    annotations:
      description: "A Celery worker for Ibutsu"
      openshift.io/image.insecureRepository: "true"
  spec:
    lookupPolicy:
      local: true
- kind: ImageStream
  apiVersion: v1
  metadata:
    name: celery-flower
    annotations:
      description: "A monitoring application for Celery task queues"
      openshift.io/image.insecureRepository: "true"
  spec:
    lookupPolicy:
      local: true
- kind: ImageStream
  apiVersion: v1
  metadata:
    name: ibutsu-task-monitor
    annotations:
      description: "A task monitor for watching report-related tasks"
      openshify.io/image.insecureRepository: "true"
  spec:
    lookupPolicy:
      local: true
- kind: ImageStream
  apiVersion: v1
  metadata:
    name: ibutsu-scheduler
    annotations:
      description: "A Celery beat scheduler for Ibutsu"
      openshift.io/image.insecureRepository: "true"
- kind: Service
  apiVersion: v1
  metadata:
    labels:
      app: ${APP_NAME}
    name: ibutsu-frontend
    namespace: ${NAMESPACE}
  spec:
    ports:
    - port: 8080
      targetPort: 8080
    selector:
      deploymentConfig: ibutsu-frontend
- kind: Service
  apiVersion: v1
  metadata:
    labels:
      app: ${APP_NAME}
    name: ibutsu-backend
    namespace: ${NAMESPACE}
  spec:
    ports:
    - port: 8080
      targetPort: 8080
    selector:
      deploymentConfig: ibutsu-backend
- kind: Service
  apiVersion: v1
  metadata:
    labels:
      app: ${APP_NAME}
    name: ibutsu-worker
    namespace: ${NAMESPACE}
  spec:
    ports:
    - port: 8080
      targetPort: 8080
    selector:
      deploymentConfig: ibutsu-worker
- kind: Service
  apiVersion: v1
  metadata:
    labels:
      app: ${APP_NAME}
    name: ibutsu-scheduler
    namespace: ${NAMESPACE}
  spec:
    ports:
    - port: 8080
      targetPort: 8080
    selector:
      deploymentConfig: ibutsu-scheduler
- kind: Service
  apiVersion: v1
  metadata:
    labels:
      app: ${APP_NAME}
    name: celery-flower
    namespace: ${NAMESPACE}
  spec:
    ports:
    - port: 8080
      targetPort: 5555
    selector:
      deploymentConfig: celery-flower
- kind: Service
  apiVersion: v1
  metadata:
    labels:
      app: ${APP_NAME}
    name: mongodb
    namespace: ${NAMESPACE}
  spec:
    ports:
      - port: 27017
        targetPort: 27017
    selector:
      deploymentConfig: mongodb
- kind: Service
  apiVersion: v1
  metadata:
    labels:
      app: ${APP_NAME}
    name: redis
    namespace: ${NAMESPACE}
  spec:
    ports:
      - port: 6379
        targetPort: 6379
    selector:
      deploymentConfig: redis
- kind: Route
  apiVersion: v1
  metadata:
    labels:
      app: ${APP_NAME}
    name: ibutsu-frontend
    namespace: ${NAMESPACE}
    annotations:
      description: "A route to the frontend"
  spec:
    host: ${FRONTEND_ROUTE}
    to:
      kind: Service
      name: ibutsu-frontend
    tls:
      insecureEdgeTerminationPolicy: Redirect
      termination: edge
- kind: Route
  apiVersion: v1
  metadata:
    labels:
      app: ${APP_NAME}
    name: ibutsu-backend
    namespace: ${NAMESPACE}
    annotations:
      description: "A route to the backend"
  spec:
    host: ${BACKEND_ROUTE}
    to:
      kind: Service
      name: ibutsu-backend
    tls:
      insecureEdgeTerminationPolicy: Redirect
      termination: edge
- kind: Route
  apiVersion: v1
  metadata:
    labels:
      app: ${APP_NAME}
    name: celery-flower
    namespace: ${NAMESPACE}
    annotations:
      description: "A route to Celery Flower"
  spec:
    host: ${BACKEND_ROUTE}
    to:
      kind: Service
      name: celery-flower
    tls:
      insecureEdgeTerminationPolicy: Redirect
      termination: edge
- kind: PersistentVolumeClaim
  apiVersion: v1
  metadata:
    name: mongodb
    namespace: ${NAMESPACE}
  spec:
    accessModes:
      - ReadWriteOnce
    resources:
      requests:
        storage: ${MONGODB_STORAGE}
    volumeName: mongodb-data
- kind: PersistentVolumeClaim
  apiVersion: v1
  metadata:
    name: redis
    namespace: ${NAMESPACE}
  spec:
    accessModes:
      - ReadWriteOnce
    resources:
      requests:
        storage: ${REDIS_STORAGE}
    volumeName: redis-data
- kind: Secret
  apiVersion: v1
  metadata:
    name: mongodb
    namespace: ${NAMESPACE}
  type: opaque
  stringData:
    database-admin-password: ${MONGODB_ADMIN_PASSWORD}
    database-user: ${MONGODB_USER}
    database-password: ${MONGODB_PASSWORD}
    database-name: ${MONGODB_DATABASE}
- kind: Secret
  apiVersion: v1
  metadata:
    name: redis
    namespace: ${NAMESPACE}
  type: opaque
  stringData:
    database-password: ${REDIS_PASSWORD}
parameters:
- name: MONGODB_ADMIN_PASSWORD
  displayName: MongoDB Admin Password
  description: The password for the admin user in MongoDB
  generate: expression
  from: '[\w]{16}'
- name: MONGODB_USER
  displayName: MongoDB User
  description: The username for authentication in MongoDB
  generate: expression
  from: 'user[\a\d]{4}'
- name: MONGODB_PASSWORD
  displayName: MongoDB Password
  description: The password for the MongoDB user
  generate: expression
  from: '[\w]{16}'
- name: MONGODB_DATABASE
  displayName: MongoDB Database
  description: The name of the database to use in MongoDB
  value: test_artifacts
- name: MONGODB_STORAGE
  displayName: MongoDB Storage
  description: The amount of storage space for the database to use
  value: 30Gi
- name: REDIS_PASSWORD
  displayName: Redis Password
  description: The password for Redis
  generate: expression
  from: '[\w]{16}'
- name: REDIS_STORAGE
  displayName: Redis Storage
  description: The amount of storage space for Redis to use
  value: 2Gi
- name: IBUTSU_REPO_URL
  displayName: Ibutsu Repository URL
  description: The URL of the git repository with the Ibutsu server source code
  value: https://github.com/ibutsu/ibutsu-server.git
- name: IBUTSU_REPO_BRANCH
  displayName: Ibutsu Repository Branch
  description: The branch to pull the code from (defaults to master)
  value: master
- name: APP_NAME
  displayName: App Name
  description: The name of the application
  value: ibutsu-server
- name: NAMESPACE
  displayName: Namespace
  description: The namespace for all of the images, applications, etc.
  value: ibutsu-server
- name: FRONTEND_ROUTE
  displayName: Frontend Route
  description: The URL of the frontend of the Ibutsu server
  value: ibutsu.example.com
- name: BACKEND_ROUTE
  displayName: Backend Route
  description: The URL of the backend of the Ibutsu server
  value: ibutsu-api.example.com
