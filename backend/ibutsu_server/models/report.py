# coding: utf-8
from __future__ import absolute_import

from ibutsu_server import util
from ibutsu_server.models.base_model_ import Model
from ibutsu_server.models.report_parameters import ReportParameters


class Report(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(
        self, id=None, filename=None, mimetype=None, url=None, parameters=None
    ):  # noqa: E501
        """Report - a model defined in OpenAPI

        :param id: The id of this Report.  # noqa: E501
        :type id: str
        :param filename: The filename of this Report.  # noqa: E501
        :type filename: str
        :param mimetype: The mimetype of this Report.  # noqa: E501
        :type mimetype: str
        :param url: The url of this Report.  # noqa: E501
        :type url: str
        :param parameters: The parameters of this Report.  # noqa: E501
        :type parameters: ReportParameters
        """
        self.openapi_types = {
            "id": str,
            "filename": str,
            "mimetype": str,
            "url": str,
            "parameters": ReportParameters,
        }

        self.attribute_map = {
            "id": "id",
            "filename": "filename",
            "mimetype": "mimetype",
            "url": "url",
            "parameters": "parameters",
        }

        self._id = id
        self._filename = filename
        self._mimetype = mimetype
        self._url = url
        self._parameters = parameters

    @classmethod
    def from_dict(cls, dikt) -> "Report":
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Report of this Report.  # noqa: E501
        :rtype: Report
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Report.

        Unique ID of the project  # noqa: E501

        :return: The id of this Report.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Report.

        Unique ID of the project  # noqa: E501

        :param id: The id of this Report.
        :type id: str
        """

        self._id = id

    @property
    def filename(self):
        """Gets the filename of this Report.

        The filename of the report  # noqa: E501

        :return: The filename of this Report.
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this Report.

        The filename of the report  # noqa: E501

        :param filename: The filename of this Report.
        :type filename: str
        """

        self._filename = filename

    @property
    def mimetype(self):
        """Gets the mimetype of this Report.

        The mime type of the downloadable file  # noqa: E501

        :return: The mimetype of this Report.
        :rtype: str
        """
        return self._mimetype

    @mimetype.setter
    def mimetype(self, mimetype):
        """Sets the mimetype of this Report.

        The mime type of the downloadable file  # noqa: E501

        :param mimetype: The mimetype of this Report.
        :type mimetype: str
        """

        self._mimetype = mimetype

    @property
    def url(self):
        """Gets the url of this Report.

        The URL to the downloadable report  # noqa: E501

        :return: The url of this Report.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Report.

        The URL to the downloadable report  # noqa: E501

        :param url: The url of this Report.
        :type url: str
        """

        self._url = url

    @property
    def parameters(self):
        """Gets the parameters of this Report.


        :return: The parameters of this Report.
        :rtype: ReportParameters
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this Report.


        :param parameters: The parameters of this Report.
        :type parameters: ReportParameters
        """

        self._parameters = parameters
