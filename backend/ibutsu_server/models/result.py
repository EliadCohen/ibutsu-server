# coding: utf-8
from __future__ import absolute_import

from ibutsu_server import util
from ibutsu_server.models.base_model_ import Model


class Result(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(
        self,
        id=None,
        test_id=None,
        starttime=None,
        duration=None,
        result=None,
        metadata=None,
        params=None,
        source=None,
    ):
        """Result - a model defined in Swagger

        :param id: The unique id of this Result.
        :type id: str
        :param test_id: The test_id of this Result.
        :type test_id: str
        :param starttime: The starttime of this Result.
        :type starttime: float
        :param duration: The duration of this Result.
        :type duration: float
        :param result: The result of this Result.
        :type result: str
        :param metadata: The metadata of this Result.
        :type metadata: object
        :param params: The params of this Result.
        :type params: object
        :param source: The source of this Result.
        :type source: str
        """
        self.openapi_types = {
            "id": str,
            "test_id": str,
            "starttime": float,
            "duration": float,
            "result": str,
            "metadata": object,
            "params": object,
            "source": str,
        }

        self.attribute_map = {
            "id": "id",
            "test_id": "test_id",
            "starttime": "starttime",
            "duration": "duration",
            "result": "result",
            "metadata": "metadata",
            "params": "params",
            "source": "source",
        }

        self._id = id
        self._test_id = test_id
        self._starttime = starttime
        self._duration = duration
        self._result = result
        self._metadata = metadata
        self._params = params
        self._source = source

    @classmethod
    def from_dict(cls, dikt) -> "Result":
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Result of this Result.
        :rtype: Result
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Result.

        Unique id

        :return: The id of this Result.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Result.

        Unique id

        :param id: The id of this Result.
        :type id: str
        """

        self._id = id

    @property
    def test_id(self):
        """Gets the test_id of this Result.

        Unique id

        :return: The test_id of this Result.
        :rtype: str
        """
        return self._test_id

    @test_id.setter
    def test_id(self, test_id):
        """Sets the test_id of this Result.

        Unique id

        :param test_id: The test_id of this Result.
        :type test_id: str
        """

        self._test_id = test_id

    @property
    def starttime(self):
        """Gets the starttime of this Result.

        Timestamp of starttime.

        :return: The starttime of this Result.
        :rtype: float
        """
        return self._starttime

    @starttime.setter
    def starttime(self, starttime):
        """Sets the starttime of this Result.

        Timestamp of starttime.

        :param starttime: The starttime of this Result.
        :type starttime: float
        """

        self._starttime = starttime

    @property
    def duration(self):
        """Gets the duration of this Result.

        Duration of test in seconds.

        :return: The duration of this Result.
        :rtype: float
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this Result.

        Duration of test in seconds.

        :param duration: The duration of this Result.
        :type duration: float
        """

        self._duration = duration

    @property
    def result(self):
        """Gets the result of this Result.

        Status of result.

        :return: The result of this Result.
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this Result.

        Status of result.

        :param result: The result of this Result.
        :type result: str
        """
        allowed_values = ["passed", "failed", "error", "skipped"]
        if result not in allowed_values:
            raise ValueError(
                "Invalid value for `result` ({}), must be one of {}".format(result, allowed_values)
            )

        self._result = result

    @property
    def metadata(self):
        """Gets the metadata of this Result.


        :return: The metadata of this Result.
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Result.


        :param metadata: The metadata of this Result.
        :type metadata: object
        """

        self._metadata = metadata

    @property
    def params(self):
        """Gets the params of this Result.


        :return: The params of this Result.
        :rtype: object
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this Result.


        :param params: The params of this Result.
        :type params: object
        """

        self._params = params

    @property
    def source(self):
        """Gets the source of this Result.

        Where the data came from (useful for filtering)

        :return: The source of this Result.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this Result.

        Where the data came from (useful for filtering)

        :param source: The source of this Result.
        :type source: str
        """

        self._source = source
