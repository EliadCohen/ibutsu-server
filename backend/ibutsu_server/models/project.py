# coding: utf-8
from __future__ import absolute_import

from ibutsu_server import util
from ibutsu_server.models.base_model_ import Model


class Project(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, name=None, title=None, owner_id=None, group_id=None):
        """Project - a model defined in OpenAPI

        :param id: The id of this Project.
        :type id: str
        :param name: The machine name of this Project.
        :type name: str
        :param title: The human readable title of this Project.
        :type title: str
        :param owner_id: The owner_id of this Project.
        :type owner_id: str
        :param group_id: The group_id of this Project.
        :type group_id: str
        """
        self.openapi_types = {
            "id": str,
            "name": str,
            "title": str,
            "owner_id": str,
            "group_id": str,
        }

        self.attribute_map = {
            "id": "id",
            "name": "name",
            "title": "title",
            "owner_id": "ownerId",
            "group_id": "groupId",
        }

        self._id = id
        self._name = name
        self._title = title
        self._owner_id = owner_id
        self._group_id = group_id

    @classmethod
    def from_dict(cls, dikt) -> "Project":
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Project of this Project.
        :rtype: Project
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Project.

        Unique ID of the project

        :return: The id of this Project.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Project.

        Unique ID of the project

        :param id: The id of this Project.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Project.

        The name of the project

        :return: The name of this Project.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Project.

        The name of the project

        :param name: The name of this Project.
        :type name: str
        """

        self._name = name

    @property
    def title(self):
        """Gets the title of this Project.

        The title of the project

        :return: The title of this Project.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Project.

        The title of the project

        :param title: The title of this Project.
        :type title: str
        """

        self._title = title

    @property
    def owner_id(self):
        """Gets the owner_id of this Project.

        The ID of the owner of this project

        :return: The owner_id of this Project.
        :rtype: str
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id):
        """Sets the owner_id of this Project.

        The ID of the owner of this project

        :param owner_id: The owner_id of this Project.
        :type owner_id: str
        """

        self._owner_id = owner_id

    @property
    def group_id(self):
        """Gets the group_id of this Project.

        The ID of the group of this project

        :return: The group_id of this Project.
        :rtype: str
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this Project.

        The ID of the group of this project

        :param group_id: The group_id of this Project.
        :type group_id: str
        """

        self._group_id = group_id
